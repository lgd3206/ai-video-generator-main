generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  videos       VideoGeneration[]
  usageRecords UsageRecord[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VideoGeneration {
  id          String            @id @default(cuid())
  userId      String
  type        VideoType         @default(TEXT_TO_VIDEO)
  prompt      String            @db.Text
  imageUrl    String?
  videoUrl    String?
  status      GenerationStatus  @default(PENDING)
  duration    Int?
  fileSize    Int?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  completedAt DateTime?
  errorMessage String?          @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("video_generations")
}

model UsageRecord {
  id        String   @id @default(cuid())
  userId    String
  type      String
  credits   Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("usage_records")
}

enum VideoType {
  TEXT_TO_VIDEO
  IMAGE_TO_VIDEO
}

enum GenerationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}