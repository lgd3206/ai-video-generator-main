// 生产数据库配置
// prisma/schema.prisma (完整版)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // 或 "mysql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?

  // 订阅信息
  credits       Int       @default(3) // 免费积分
  subscription  Subscription?

  // 关联数据
  accounts         Account[]
  sessions         Session[]
  videoGenerations VideoGeneration[]
  usageRecords     UsageRecord[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// 订阅模型
model Subscription {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  plan      String   // "free", "pro", "enterprise"
  status    String   // "active", "canceled", "past_due"

  stripeCustomerId       String?
  stripeSubscriptionId   String?
  stripePriceId         String?

  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?

  monthlyCredits Int @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("subscriptions")
}

// 视频生成记录
model VideoGeneration {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  type      String   // "TEXT_TO_VIDEO", "IMAGE_TO_VIDEO"
  status    String   // "PROCESSING", "COMPLETED", "FAILED"

  // 输入参数
  prompt    String
  imageUrl  String?
  duration  Int?
  fps       Int?

  // AI服务信息
  jobId     String?
  provider  String?  // "replicate", "runwayml"

  // 输出结果
  videoUrl     String?
  thumbnailUrl String?

  // 元数据
  estimatedCompletionTime DateTime?
  completedAt            DateTime?
  errorMessage           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("video_generations")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// 使用记录（用于分析）
model UsageRecord {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  action    String   // "TEXT_TO_VIDEO", "IMAGE_TO_VIDEO", "DOWNLOAD"
  credits   Int      // 消耗的积分
  metadata  Json?    // 额外信息

  createdAt DateTime @default(now())

  @@map("usage_records")
}